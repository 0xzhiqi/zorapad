generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   // Remove @unique
  emailVerified DateTime?
  image         String?
  walletAddress String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  novels        Novel[]   // Add relation to novels
  comments      Comment[] // Add relation to comments
  replies       Reply[]   // Add relation to replies

  @@map("users")
}

model Novel {
  id                      String    @id @default(auto()) @map("_id") @db.ObjectId
  title                   String
  coinName                String    // Name of the coin
  coinSymbol              String    // Symbol of the coin (e.g., NOVEL)
  seekPublicFeedback      Boolean   @default(false)
  published               Boolean   @default(false)
  coinAddress             String?   // Address of the deployed coin contract
  coinTransactionHash     String?   // Transaction hash of coin creation
  owners                  String?   // Wallet address of the coin owners
  payoutRecipient         String?   // Wallet address for payouts
  authorId                String    @db.ObjectId
  author                  User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  chapters                Chapter[] // Add relation to chapters
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  @@map("novels")
}

model Chapter {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  order           Int       // Chapter order within the novel
  contentUrl      String?   // Google Cloud Storage URL for the chapter content
  contentPath     String?   // Path in Google Cloud Storage
  wordCount       Int       @default(0)
  published       Boolean   @default(false)
  novelId         String    @db.ObjectId
  novel           Novel     @relation(fields: [novelId], references: [id], onDelete: Cascade)
  comments        Comment[] // Add relation to comments
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([novelId, order]) // Ensure unique order within each novel
  @@map("chapters")
}

model Comment {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  content         String   // The comment text
  highlightedText String   // The exact text that was highlighted (for reference)
  startOffset     Int      // Start character position in the chapter content
  endOffset       Int      // End character position in the chapter content
  textLength      Int      // Length of highlighted text (for validation)
  isAuthorComment Boolean  @default(false) // Whether comment is by the author
  chapterId       String   @db.ObjectId
  chapter         Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  userId          String   @db.ObjectId
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  replies         Reply[]  // Replies to this comment
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([chapterId, startOffset, endOffset]) // Prevent duplicate comments on same position
  @@index([chapterId, startOffset]) // Index for efficient position-based queries
  @@map("comments")
}

model Reply {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String   // The reply text
  commentId String   @db.ObjectId
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("replies")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}